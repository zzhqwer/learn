
js的基础语法：
	var声明作用域
		-使用var操作符定义的变量会成为包含它的函数的局部变量。比如，使用var在一个函数内定义一个变量，就意味着该变量将在函数退出时被销毁：
		function test(){
			var mas=100;//局部变量，函数结束时会销毁，只可以在本函数中使用。
		}
		text（）//函数的调用
		consol.log（mas）//出错
		function test(){
			mas=100;//在函数内定义变量时省略var操作符，可以创建一个全局变量；
		}
		text（）//函数的调用
		consol.log（mas）//100
	var声明提升
		使用var关键字声明的变量会自动提升到函数作用域的顶部；

	let声明
		let声明是块作用域，
		let声明的作用域仅限于该块内部。
		let声明不会自动提升到作用域的顶部
	全局声明
		与var关键字不同，使用let在全局作用域中声明的变量不会成为window对象的属性（var声明的变量则会）
		var name=“mat”;
		console.log(window.name);//mat
		let name="mat";
		console.log(window.name);//undefineds
 	1.javascript的引入方式：3种方式
     		内部方式：使用script标签，在script标签中，直接写js代码。最好放在head和body中；
     		外部方式：也是使用script标签，通过src属性引入外部js文件
     		内联方式：（了解）；直接以事件属性在标签中

	 2.js
     		（1）.js代码区分大小写
     		（2）.js会忽略多余的空格
     		（3）.注释：通过特殊的符号 标记代码，标记的代码会被忽略
       			 单行注释
        	 		多行注释
    		 （4）.标识符：变量就是一种标识符
       			 -只能包含数字、字母、下划线_、$
       			 -不能以数字开头
       			 -不能使用关键字：系统已规定过作用的词
        			 -不能使用保留字：系统虽然还没正式使用，但是已经保留起来了

	 3.js输出语句 就是把js中的数据，输出到页面中，用户可以看到。
		 -alert（）浏览器弹框（不常用）（弹框可以终止代码执行）
		-console。log（）控制台输出（经常使用的）
    	 	-控制台快捷键（F12）
		 -document.write()写入页面
	    		   -如果写入的字符中有HTML结构，会被解析
  	     		  -我们在网页加载过程中的写入都是依次写入，如果是在网页加载完成之后在写入，就是覆盖写入

 4.js数据类型
   （1）.所有的编程语言 本质上都是为了处理数据
   （2）.js能够处理那些数据
	-原始类型（primitive type）和 对象类型（object type）
   （3）.现在——原始类型（基础类型）
	-数字类型：number
	-字符串类型：string
	-布尔类型	：bool  true真  false假
	-null类型	：null；（一个不存在的对象）
	-undefined类型：undefined	（一个并不存在的对象属性，已声明但没有赋值的变量）
	-null和undefined的区别
	 1.空
	 2.变量已声明但未赋值；undefined
	 3.数字转换，null==0；而undefined==NaN

    （4）.数字类型
    （5）.字符串：在JavaScript程序中的字符串直接量，是由单引号或双引号括起来的字符序列
	-有一对引号包裹的字符，就是一个字符串
	-“”‘’` `
 	-如果要在字符串中显示引号
	   -不同引号嵌套使用
     （6）.字符串中的转义字符
	在字符串中使用\，作用为转义字符
	-让原来有特殊作用符号，失去特殊作用，变为普通字符
	  \'   \"   \`  \\
	-与指定的字母搭配，可以实现特殊的作用
	  \n :换行；\t:制表符  \r:回车--换行
     （7）.布尔类型：只有两个数据
	true：真
	false：假
     （8）.null：只有一个值 null

 5、js变量的使用步骤
	-声明变量		使用var关键字来声明变量---变量只声明 未赋值 默认是undefined
	-变量赋值
	-变量使用
     变量高级
	-声明与赋值简化
	-同时声明多个变量

 6.检测 数据类型
	-在Javascript中可以使用typeof操作符检测数据的类型，该操作符会将需检测数据的类型以字符串的形式返回。
	-typeof（数据类型）；typeof  数据类型；

 7.数据类型转换
	（1）. 字符串  转换为  数字
	    -parseInt（）将字符串转为整数
		-纯数字字符串 可以正常转换
		-以数字开头 可以转换--截取开头的整数
		-其他的 都不能转换   ---无法用数字来表示的数字 NaN（Not a Number ）来表示结果
		-NaN是数字类型 ，但是NaN不能与任何值相等。
	    -parseFloat（）将字符串转为实数：整数、小数（保留小数位）
		-纯数字字符串 可以正常转换       （保留小数）
		-以数字开头 可以转换                 （保留小数）
		-其他的 都不能转换   ---无法用数字来表示的数字 NaN（Not a Number ）来表示结果
		-NaN是数字类型 ，但是NaN不能与任何值相等。
 8.强制转换
	Number（）将其他任意的数据 转换为数字
		-字符串转数字，只有纯数字的字符串可以转化，没有截取功能
		-true==1    false==0
		-null==0
		-undefined===NaN
		强制规定   undefined==NaN
		isNaN（）检查是不NaN，可以判断是不是数字
	Boolean（）将其他任意数据 转换为true或false
		-所有的数据中，只要5个数据，可以表示假
		-false、“”、0、null、undefined、NaN
	String（）将其他任意数据 转换为字符串
		-不管什么数据，套上双引号。都能转换
                （1）.都是把数字转为字符串
	（2）.都是数字的方法
		-toSrting（）-将数字转为字符串，可以设置转换进制的表示方式
		-toFixed（）-将数字转为字符串，可以设置数字的小数位
		-toExponential（）-将数字转为字符串，可以用科学计数法来表示
 		-toPrecision（）    -将数字转为字符串，可以查询总长度


js操作页面：
	解释系统中现有的数据---和页面中的标签——对应 ---找到对应标签的数据  进行修改 ---操作标签
	这些现成的数据有个名字：DOM（文档对象模型：documen object  model）
	DOm：就是操作页面的（数据）代码
	DOM:能干什么
		-获取标签
		-操作标签的内容
		-操作标签的属性
		-操作标签的样式
		-操作标签的事件
	DOM：通过javascript代码，可以修改整个HTMl文档。可以添加、移除、改变或重排页面上的元素。要改变页面的某个元素，Javascript需要有对HTML文档中所有元素进行访问的入口。这个入口，连同对HTML 元素进行添加、移动、改变或移除的方法和属性，都是通过DOM（文档对象模型）来获得的。
	DOM中的节点（根据DOm规定，HTML文档的每个成分都是一个节点（NOde））：
		-整个文档是一个文档节点
		-每个HTML标签是一个元素节点
		-包含每个HTML元素中的文本是文本节点。
		-每一个HTML属性是一个属性节点
		-注释属于注释节点
	结构结构图，对应的标签结构图。这些js的节点并不是独立的，与html一样，是相互联系的

	DOM  获取标签---操作内容----操作属性----样式（css）----事件操作--
	（1）.获取DOM数据 ：通过标签名，通过类名（class）、通过id名---通用方式
			-通过标签名--拿到的是集合（组）--通过索引号(从[0]开始) 获取指定的标签
				var p=document.getElementsBYTagName（"标签")[0]
			-通过类名获取标签---拿到的也是集合---也是通过索引号获取标签
				var  a=document.getElementsByClassName("class名称")[0]
			-通过ID获取标签--直接获取标签
				var  a=document.getElementById("Id名称")

	（2）新增的获取标签的方式 通过css选择器 获取  
		//querySelector()获取第一个满足选择器的标签
		//querySelectorAll()以集合的形式获取标签
		-var div_first=document.querySelector("div")
	DOM 操作内容
    	        （1）innerText：操作文本
		//获取数据的内容  设置标签的内容 （innerText）
		var div1=document.querySelector(".div1")
		var div2=document.querySelector(".div2")
		
		// 获取div1中的内容（文本）.innerText
		var text1=div1.innerText
		console.log(text1)
		
		// 把获取到的文本，设置到div2里
		div2.innerText=text1
		innerText的缺点：只能操作标签中的纯文本内容
	         （2）innerHTML：可以识别文本中的标签；；读取所有内容（标签） 设置的时候可以识别标签结构，并解析
		//获取内容
		var div1=document.querySelector(".div1")
		var div2=document.querySelector(".div2")
		
		// 获取div1中的内容（文本标签也可以识别）
		var text1=div1.innerHTML
		console.log(text1)
		// 把获取到的文本(标签)，设置到div2里
		div2.innerHTML=text1
	从页面中获取的数据都是字符串
	

	 DOM操作属性
		（1）什么是标签属性 class IDsrc  alt  href title
		（2）操作属性：获取属性值 设置属性  
				获取属性值：直接调用属性的名称，class特殊===className
		（3）标签的标准属性，使用以上的操作方式
		（4）属性通用操作方式：标准属性、自定义属性
			setAttribute(属性名称，属性值)---设置指定的属性值
			getAttribute(属性名称)----获取指定的属性值

			var img1=document.querySelectorAll("img")[0]
			var src=img1.src
			console.log(src)
	DOm操作样式
		操作样式-----获取标签----获取样式---设置样式
			//获取标签
			var demo1=document .querySelector(".demo1")
			var demo2=document .querySelector(".demo2")
			
		// 获取demo1的一部分样式	
			var w=demo1.style.width//从标签的style中获取width的样式
			var h=demo1.style.height//从标签的style中2获取height的样式
			var bg=demo1.style.backgroundColor//样式中有-，需要-的位置变成-后单词首字母的大写
			
			console.log(w)
			console.log(h)
			console.log(bg)
		//设置样式
			demo2.style.width=w
			demo2.style.height=h
			demo2.style.backgroundColor=bg
			demo2.style.borderRadius="50%"

js事件
	1.事件：事件是指zaiHTML页面的元素上发生的各种事情。事件发生以后的操作，是我们自己写的
		-鼠标相关的：点击、鼠标移动
		-键盘相关的：键盘事件
		-表单事件
		-加载事件
	2.Javas采用了异步事件驱动编程模型
		-同步代码：读一句，执行一句  ---读下一句，执行下一句
		-异步代码：可以跳过    读一句，没等指定--读下一句，执行下一句
	3.事件为什么要设计成异步？？
	4.发生了事件。我们可以有多个操作的代码。实际情况，我们学习的，发生事件以后，只有一个操作代码
	5、事件处理的代码怎么写：
		-三要素
			事件目标：哪个标签的事件  可以用this代替
			事件类型：是哪一种事件
			事件处理程序（函数）：事件发生之后，要执行的代码
	6、鼠标事件是所有标签通用事件，键盘事件他只能给特定的标签用
	7、键盘事件：只有表单标签才能触发键盘事件，其他标签不行：input     、select 、textarea、button
	8、表单事件：只能表单标签使用
	9、加载事件：等页面加载完毕之后，在执行代码
		时间：window：整个页面，document：整个文档（页面） window>document
		这两个都不用获取，直接使用，我们实际使用，常用的是window
		事件目标：window
		事件类型：onload
	10.事件对象：事件处理函数中，接收一个数据，数据中是这次事件的一些信息
	11.事件冒泡：子标签发生事件以后，会将事件逐层传递给父标签。  document----windows
		-绝大部分的事件都会冒泡
		-onmouseenter 不会冒泡
		-onmouseover  会冒泡
js运算符
	1.算数运算符
		+ - *  /  %(模：取余)
		算数运算符  在计算之前，会将参与运算的操作数自动转换（隐式类型转换）
		特殊情况：加法运算时，如果操作数有字符串，就会直接转为字符串，然后进行字符串拼接。
		
		5/0 -----infinity（无穷大）
		0/0 -----NaN
		1+{}-----“1 object  object”
		一元运算符
			+  -
		--  ++
		自运算符单独使用放前放后都一样但和其他运算放在一起时会有区别
		自运算符在前，先自运算  再参与其他运算
		自预算符在后，先参与其他运算  在自运算
	2.比较运算符
		-比较运算符的计算结果是   布尔值：true   false
		>  >=  < <=  == === != !==
		==
		字符串进行比较，逐个比较
	3.逻辑运算符
		逻辑与&&  逻辑或||   逻辑非！
		真是的逻辑运算
			&&：挨个判断，有假就停，停在哪个操作数，结果就是那个操作数。
			|  |  ：挨个判断，有真就停。。。。。
			 ！  ：非运算的结果一定是布尔值
				先把操作数，转换为布尔值
				然后取反
 	4.赋值运算符
		=：就是把后边的数据赋值给前面的变量
	5.复合运算符
		+=  -=  *= /= %=
	6.三元运算符
		？：
js流程控制语句
	条件语句
		单分支if语句
		双分支if语句
		多分支if语句
		switch语句与多条件的if语句功能一样
		switch语句和if语句的区别
		switch只能做相等比较并且是比较全等
		switch语句（表达式
			{
			case   ：
			break；
			default：
			break;
			}
	循环语句
		while循环          while(循环条件){初始值的累计} 
			while（循环条件）{执行的代码}
		do..while  循环	
			do{初始值的累计}while（循环条件）-至少执行一次
		for 循环（这是最重要的）
			语法：for（初始值;  循环条件; 初始值的累计）{}
			初始值、条件、初始值的累计
		结束循环
			循环中使用 break 和 continue 结束循环
			break  	结束循环
			continue  	结束本次循环，直接调到下一次循环
js内置对象
	 字符串对象 （扩展了字符串的功能 ）
		获取字符串的长度   length
		获取指定的字符   charAt
		获取指定的字符串对应 ASC码 {所有的文字 都有一个对应的编码}  charCodeAt
		indexOf（）：获取指定字符在字符串串中第一次的位置
			有：位置的索引号
			没有：-1
			indexOf（“aa”，3）：从索引3开始找
		lastIndexOf（）从最后开始找，但是索引号都是正常从左往右数
		toLowerCase方法将字符串对象中的所有字符转小字符
		toUpperCase方法将字符串对象中的所有字符转大字符
		trim () 方法用于删除字符串的头尾空白符，空白符包括：空格、制表符 tab、换行符等其他空白符等。
			. trim () 方法不会改变原始字符串。
		split() 方法用于把一个字符串分割成字符串数组。
1.js是基于对象的语言（面向流程+内置）----c#面向对象的语言（自定义对象+内置）

	日期对象：
		使用日期对象，对象是不能直接放在页面中，日期对象很特殊，当我们把日期对象放在页面时。他会自动调用
		-获取这个日期对象
			-var   d1=new Date()  获取当前时间的日期对象
			-var d2=new Date(2021,5,4,5,24,53) 获取指定时间的日期对象
·=			-var d2=new Date("2021/5/4,5,24,53") 获取任意符合日期格式的对象
			-var d3=new Date(1000)//1000ms--1s  从1970年1月1号 8：00:00开始算的
		-表示的哪个时间
			
			
		-如何使用日期对象
			var year=d1.getFullYear()
			var mouth=d1.getMonth()
			var date=d1.getDate()
			var hours=d1.getHours()
			var min=d1.getMinutes()
			var sec=d1.getSeconds()
			var day=d1.getDay()
		-修改日期对象
			d.setFullYear(52000)
			d.setMonth(7)
			d.setDate(12)
			d.setHours(20)
			d.setSeconds(50)
			d.setMilliseconds(40)
	数学对象:
		Math 对象不需要new 可以直接使用
		Math对象的属性：提供的时一些数学常量
		Math.属性
			E	：返回算术常量e，即自然对象
		Math.方法	  ：提供的是数学公式
			max（x）	：返回最大值
			min（x）	：返回最小值
			ceil（x）	：向下取整
			floor（x）：向上取整  parseint
			random（x）：随机数 获取一个范围在{0.1}0<=   <1的随机数
				公式：	
					求x-y以内的随机数
					Math.round(Math.random()*(y-x+1))+x
					求0-n 以内的随机数， 包括0和n
					Math.round(Math.random()*n)
	数组对象：
		创建数组对象
			-创建数组的对象
			-数组中可以存储其他的数据，这写数据称为数组的元素（用数组存储其他数据）
			-数组的元素默认是undefined
			-for in循环 ：专门用来循环数组和对象
				//声明的变量用来表示索引值for（var item in arr）{}
		操作数组中的元素
			通过索引的方式添加/修改数组的元素
		数组对象的属性和方法
			方法：
				join：数组对象的元素都转化为字符串并拼接，默认逗号
				reverse：反转，将原数组反转
				sort方法排序，会提供一个排序的新数组，原数组也会排序
						arr1.sort(function(a,b){
							return a-b   //第一个 - 第二个  正序
							/ return b-a   //第二个 - 第一个 倒序
			
						})
				push：在数组的尾部添加一个或多个元素，并返回数组的新的长度。
					在原数组中追加数据
					返回值：数组的长度
				pop：删除数组的最后一位元素，并返回数组长度
				unshift：在数组的头部添加一个或多个元素
					返回值：数组的长度
				shift:删除数组的第一位元素，并返回数组长度
				indexOf：同字符串的功能
				lastdexOf:同字符串的功能
				concat:合并 数组
				slice(开始，结束) 方法以新的数组对象，返回数组中被选中的元素。
				splice() 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。
				fill() 方法用静态值填充数组中的指定元素。

js函数
	函数的概念
		-函数用来包裹其他代码
		-函数只需要定义一次，但是可以调用多次。
		-函数本质上也是一种数据，函数类型——函数对象
	定义函数
		-定义函数时，函数并不会执行，调用时才会执行定义函数的代码
		-function  函数名（）{}
	调用函数--函数高级
		-函数名（）
	函数的递归（自己调用自己）
		-递归调用：自己调用自己，实现递归调用
		-如果真的要用递归调用，一定设计结束条件
	函数的参数
		-形参（流程）     实参（对象）
		-通过函数参数，可以扩展函数的功能
		-根据逻辑的需要，在小阔号中添加参数（参数，参数）
		-在函数中，使用形参写代码流程
		-function  f(a,b){
			console.log(a*b)
			         }
		-调用函数，传入对象的参数（实参） 
			  f(5,6)
	函数的返回值
		-函数的默认返回值  underfined
		-在函数的代码最后，使用return来设置一个返回值，如果未设置，默认为underfind
		-return,一定要在最后，只能有一个：还可以结束函数
	函数的作用域
		函数中变量的作用域，作用范围
		在函数中定义的变量，只能在函数中使用---称为局部变量
		没在函数中申明的变量，---称为全局变量
		函数中使用变量时，首先查找自己的范围，没有的话找上一层定义域
		作用域链：多层函数时，里边的函数，逐层向外查找变量。
	函数的参数列表
		函数中有一个默认的自带变量 arguments，用来接收所有的实参数（实参列表）
		arguments是一个只读变量
	一些内置全局函数
		escape（）编码
		unescap（）解码
		eval（）：解析字符串中的代码