 // 什么是BOM
        // BOM 即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是window。
            //widonw对象是浏览器的顶级对象，它具有双重角色
                //1.它是JS访问浏览器窗口的一个接口
                //2.他是一个全局对象，定义在全局作用域中的的变量，函数都会变成window对象的属性和方法；

 执行机制    JS 是单线程
    同步和异步
//pageshow 重新加载页面；
window.location对象的属性
    location.href 地址
    location.host 主机名（域名）
    location.port 端口名
    location.pathname 返回路径
    location.search 返回参数  
    location.hash   返回片段  #后面内容 常见于链接 锚点；

widow.location对象的方法
    location.assign();//和href一样  特点： 记录历史，可以实现后退页面；
    location.replace();不记录历史，不可以实现后退页面；
    location.reload(); 重新加载页面；参数为true ctrl+F5强制刷新;

window.navigator对象的属性
    navigator.userAgent; 返回浏览器的版本;

window.history对象与浏览器历史记录进行交互，该对象包含用户（在浏览器窗口中）访问过的URL;
    history.back() 可以后退功能；
    history.forward() 前进功能；
    history.go(参数)  前进后退功能 参数如果是1 前进1个页面，如果是-1后退1个页面


元素偏移量offset系列
     offset翻译过来就是偏移量，我们使用offset系列相关属性可以动态的得到该元素的位置（偏移）、大小等；
        -获得元素距离带有定位父元素的位置
        -获得元素自身的大小（宽度高度）
        -注意：返回的数值都不带单位
    offset系列常用属性：
        element.offsetParent  返回作为该元素带有定位的父级元素，如果父级元素都没有定位则返回body；
        element.offsetTop     返回元素相对带有定位父元素上方的偏移
        element.offsetLeft    返回元素相对带有定位父元素左边框的偏移
        element.offsetWidth   返回自身包括padding、边框、内容区的宽度，返回数值不带单位
        element.offsetHeight  返回自身包括padding、边框、内容区的高度，返回数值不带单位
    offset 与 style 区别
       offset :                                          style : 
                可以获得任意样式表的值                            只能获得行内样式值
                获得的数值是没有单位的                            获得的数值是带px的字符串
                包含padding+border+width                         不包含padding+border+width
                等属性是只读属性，只能获取不能赋值操作             是可读写属性，可以获取也可以赋值
                想要获取元素大小位置，用offset更合适               给元素更改值，则需要用style改变

元素可视区client系列
    client系列常用属性：
        element.clientTop     返回元素上边框的大小
        element.clientLeft    返回元素左边框的大小
        element.clientWidth   返回自身包括padding、内容区的宽度，不包含边框，返回数值不带单位
        element.clientHeight  返回自身包括padding、内容区的高度，不包含边框，返回数值不带单位

元素滚动scroll系列 
    我们使用scroll系列的相关属性可以动态的得到该元素的大小、滚动距离等。
    scroll系列属性
        element.scrollTop 返回被卷去上侧距离，返回数值不带单位；
        element.scrollLeft 返回被卷去左侧距离，返回数值不带单位；
        element.scrollWidth 返回自身实际的宽度 不含边框，返回的数值不带单位；
        element.scrollHeight 返回自身实际的高度 不含边框，返回的数组不带单位；

        元素被卷去的头部是element。scrollTop,window.pageYOffset页面被卷去的头部
三大系列总结
    他们主要用法：  
        1.offset系列经常用于获得元素位置 offsetLeft  offsetTop
        2.clietn系列经常用于获取元素大小 clientWidth clientHeight
        3.scroll系列经常用于获取滚动距离 scrollTop   scrollLeft
        4.注意页面的滚动的距离通过windo.pageXoffset 获得；

立即执行函数
      //立即执行函数：不需要调用，立马能够自己执行的函数
        // 2.写法 也可以传递参数进来 如果有多个立即执行函数用分号分开；
             // (function(){})() 或者 (function () {}())
            (function(a,b){
                console.log(a+b);
            })(1,2);//第二个小括号可以看做是调用函数 里面可以传参
            (function(a,b){
                console.log(a + b);
            }(2,3));
        // 3.立即执行函数最大的作用就是 独立创建了一个作用域里面的变量都是局部变量 不会有命名冲突的情况
    dpr 物理像素比
mouseover 和 mouseenter
    当鼠标移动到元素上时就会触发mouseenter事件
    类似于mouseover，他们的区别是
    mouseover 鼠标经过自身盒子会触发，经过子盒子还会触发，mouseenter只会经过自身盒子触发
    之所以是这样 就是因为mouseenter不会冒泡；
    和mouseenter相搭配的mouseleave离开 也不会冒泡；

动画函数封装
    动画实现原理
        使用setInterval()计时器 不断移动盒子位置；
            实现步骤
                -获得盒子当前的位置
                -让盒子在当前位置加上一个移动距离
                -利用计时器不断重复这个操作
                -加一个结束定时器的条件
                -注意此元素需要添加定位，才能使用element。sryle。left；

    缓动动画原理
        //缓动动画就是让元素运动速度有所变化，最常见的是让速度慢慢停下来
        // 思路：
        //    -让盒子每次移动距离慢慢变小,速度就会慢慢落下来;
        //    -核心算法:(目标值 - 现在得到位置) / 10作为每次移动的距步长;
        //    -停止的条件是:让当前盒子位置等于目标位置就停止定时器;
        //    -步长值需要取整 向上取整 math.ceil
        //动画函数多个目标值之间移动
            // 当我们点击按钮时候，判断步长是正值还是负值
                // --正值往上取整
                // --负值往下取整
    动画函数添加回调函数
        回调函数原理：函数可以作为一个参数，将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，在执行传进去的这个函数，这个过程就叫做回调；

